diff --git a/plotjuggler_plugins/ParserProtobuf/protobuf_factory.cpp b/plotjuggler_plugins/ParserProtobuf/protobuf_factory.cpp
index 23f774e5..ed25d0a9 100644
--- a/plotjuggler_plugins/ParserProtobuf/protobuf_factory.cpp
+++ b/plotjuggler_plugins/ParserProtobuf/protobuf_factory.cpp
@@ -82,7 +82,7 @@ void ParserFactoryProtobuf::importFile(QString filename)
 
   for (int i = 0; i < info.file_descriptor->message_type_count(); i++)
   {
-    const std::string& type_name = info.file_descriptor->message_type(i)->name();
+    const std::string& type_name = std::string(info.file_descriptor->message_type(i)->name());
     auto descriptor = info.file_descriptor->FindMessageTypeByName(type_name);
     QString type_qname = QString::fromStdString(type_name);
     info.descriptors.insert({ type_qname, descriptor });
diff --git a/plotjuggler_plugins/ParserProtobuf/protobuf_parser.cpp b/plotjuggler_plugins/ParserProtobuf/protobuf_parser.cpp
index 467dfbaf..8814b3ce 100644
--- a/plotjuggler_plugins/ParserProtobuf/protobuf_parser.cpp
+++ b/plotjuggler_plugins/ParserProtobuf/protobuf_parser.cpp
@@ -56,7 +56,7 @@ bool ProtobufParser::parseMessage(const MessageRef serialized_msg, double& times
       auto field = descriptor->field(index);
 
       std::string key =
-          prefix.empty() ? field->name() : fmt::format("{}/{}", prefix, field->name());
+          prefix.empty() ? std::string(field->name()) : fmt::format("{}/{}", prefix, field->name());
       if (is_map)
       {
         // Map messages only have 2 fields: key and value. The key will be represented in
@@ -156,7 +156,7 @@ bool ProtobufParser::parseMessage(const MessageRef serialized_msg, double& times
                                    reflection->GetRepeatedEnum(msg, field, index);
 
             auto& series = this->getStringSeries(key + suffix);
-            series.pushBack({ timestamp, tmp->name() });
+            series.pushBack({ timestamp, std::string(tmp->name()) });
             is_double = false;
           }
           break;
